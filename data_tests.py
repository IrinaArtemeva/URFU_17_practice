# -*- coding: utf-8 -*-
"""Data-tests.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oemLWMu1Gghbe8bQOVKIenYWUKCbh29v
"""

# Импортируем необхоидмые библиотеки
import pandas as pd
import pytest
import matplotlib.pyplot as plt
from sqlalchemy import create_engine

# Функция для загрузки данных из CSV
def load_csv(file_path):
    return pd.read_csv(file_path)

# Функция для подключения к базе данных и загрузки витрины
def load_data_mart(query, connection_string):
    engine = create_engine(connection_string)
    with engine.connect() as conn:
        return pd.read_sql(query, conn)

# Функция для выполнения проверок
def validate_data(csv_data, data_mart):
    results = {}
        # Проверка количества столбцов
    results['column_count'] = csv_data.shape[1] == data_mart.shape[1]

    # Проверка на наличие дубликатов
    results['duplicates_in_csv'] = not csv_data.duplicated().any()
    results['duplicates_in_data_mart'] = not data_mart.duplicated().any()

    # Проверка типов данных
    results['data_types'] = csv_data.dtypes.equals(data_mart.dtypes)

    # Проверка пропущенных значений
    results['null_values_csv'] = csv_data.isnull().sum().sum() == 0
    results['null_values_data_mart'] = data_mart.isnull().sum().sum() == 0

    return results

# Функция для генерации отчета
def generate_report(results):
    df = pd.DataFrame.from_dict(results, orient='index', columns=['Status'])
    df['Status'] = df['Status'].apply(lambda x: 'Pass' if x else 'Fail')

    # Цветовая карта для графика
    colors = df['Status'].map({'Pass': 'green', 'Fail': 'red'})

    # Построение графика
    plt.figure(figsize=(10, 6))
    df['Status'].value_counts().plot(kind='bar', color=colors, alpha=0.7, edgecolor='black')
    plt.title('Validation Results', fontsize=16)
    plt.ylabel('Count', fontsize=12)
    plt.xticks(rotation=0, fontsize=12)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()

    # Сохранение графика
    plt.savefig('validation_report.png')
    plt.show()

# Тесты
@pytest.fixture

def csv_data():
    return load_csv("test_data.csv")

@pytest.fixture
def data_mart():
    return load_csv("test_mart.csv")


def test_column_count(csv_data, data_mart):
    assert csv_data.shape[1] == data_mart.shape[1], "Column counts do not match"

def test_no_duplicates_in_csv(csv_data):
    assert not csv_data.duplicated().any(), "CSV contains duplicates"

def test_no_duplicates_in_data_mart(data_mart):
    assert not data_mart.duplicated().any(), "Data mart contains duplicates"

def test_data_types(csv_data, data_mart):
    assert csv_data.dtypes.equals(data_mart.dtypes), "Data types do not match"

def test_no_null_values_in_csv(csv_data):
    assert csv_data.isnull().sum().sum() == 0, "CSV contains null values"

def test_no_null_values_in_data_mart(data_mart):
    assert data_mart.isnull().sum().sum() == 0, "Data mart contains null values"

if __name__ == "__main__":
    csv_data = load_csv("test_data.csv")
    data_mart = load_data_mart("SELECT * FROM data_mart_table", "sqlite:///test_database.db")

    validation_results = validate_data(csv_data, data_mart)
    generate_report(validation_results)
    pytest.main()